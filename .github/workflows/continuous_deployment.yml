name: Continuous Deployment

on:
    push:
     branches: [ main, add-cd-workflow ]
    workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_GITHUB_USERNAME: ${{ github.actor }}
  VM_HOST: ${{ secrets.VM_HOST }}
  VM_USERNAME: ${{ secrets.AZURE_USERNAME }}
  VM_KEY: ${{ secrets.AZURE_KEY }}
  GH_PAT: ${{ secrets.GH_PAT}}
  AZURE_VAULT_SECRET_NAME: ${{secrets.AZURE_VAULT_KEY}}
  AZURE_VAULT_NAME: ${{secrets.AZURE_VAULT_USERNAME}}
  API_URL: ${{secrets.API_URL}}
  API_KEY: ${{secrets.API_KEY}}

permissions:
  contents: read
  packages: read
  id-token: write

jobs:
    
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Copy docker-compose file to server
        run: |
          echo "Preparing SSH key..."
          echo "${{ env.VM_KEY }}" > key.pem
          chmod 600 key.pem

          echo "Copying docker-compose.prod.yml to VM..."
          scp -i key.pem -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ env.VM_USERNAME }}@${{ env.VM_HOST }}:~/whoknows
          echo "File copied successfully."

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0        
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USERNAME }}
          key: ${{ env.VM_KEY }}
          port: 22
          script: |
            echo "Logging into GitHub Container Registry..."
            echo "${{ env.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ env.DOCKER_GITHUB_USERNAME}} --password-stdin

            echo "Navigating to deployment directory..."
            cd ~/whoknows

            echo "Stopping older containers"
            sudo docker stop whoknows-prod

            echo "Pulling latest Docker images..."
            export KEYVAULT_NAME=${{ env.AZURE_VAULT_NAME }}
            export SECRET_NAME=${{ env.AZURE_VAULT_SECRET_NAME }}
            export API_URL=${{env.API_URL}}
            export API_KEY=${{env.API_KEY}}
            sudo -E docker compose -f docker-compose.prod.yml pull

            echo "Starting containers..."
            sudo -E docker compose -f docker-compose.prod.yml up -d

    
            echo "Deployment complete."
