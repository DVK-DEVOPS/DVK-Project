DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS pages;
DROP TABLE IF EXISTS pages_fts;

CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT NOT NULL UNIQUE,
  email TEXT NOT NULL UNIQUE,
  password TEXT NOT NULL
);

-- Create a default user, The password is 'password' (MD5 hashed)
INSERT INTO users (username, email, password) 
    VALUES ('admin', 'keamonk1@stud.kea.dk', '5f4dcc3b5aa765d61d8327deb882cf99');


CREATE TABLE IF NOT EXISTS pages (
    title TEXT PRIMARY KEY UNIQUE,
    url TEXT NOT NULL UNIQUE,
    content TEXT NOT NULL,
    language TEXT NOT NULL CHECK(language IN ('en', 'da')) DEFAULT 'en', -- How you define ENUM type in SQLite
    createdAt DATETIME NOT NULL,
    updatedAt DATETIME NOT NULL
);

-- 5 autogenerated results
INSERT INTO pages (title, url, content, language, createdAt, updatedAt) VALUES ('Python Asyncio Guide v2', 'progurl1.dev-v2', 'Overview of asyncio event loop, tasks, and coroutines with examples.', 'en', '2025-09-12 14:30:00', '2025-09-12 14:30:00');
INSERT INTO pages (title, url, content, language, createdAt, updatedAt) VALUES ('Java Streams Examples v2', 'progurl2.dev-v2', 'Common stream operations, collectors, and parallel processing patterns.', 'en', '2025-09-12 14:30:00', '2025-09-12 14:30:00');
INSERT INTO pages (title, url, content, language, createdAt, updatedAt) VALUES ('C# LINQ Recipes v2', 'progurl3.dev-v2', 'LINQ queries, deferred execution, and performance tips.', 'en', '2025-09-12 14:30:00', '2025-09-12 14:30:00');
INSERT INTO pages (title, url, content, language, createdAt, updatedAt) VALUES ('JavaScript Promises Patterns v2', 'progurl4.dev-v2', 'Chaining, error handling, and converting callbacks to promises.', 'en', '2025-09-12 14:30:00', '2025-09-12 14:30:00');
INSERT INTO pages (title, url, content, language, createdAt, updatedAt) VALUES ('Rust Ownership Cheatsheet v2', 'progurl5.dev-v2', 'Ownership, borrowing, lifetimes, and common borrow checker fixes.', 'en', '2025-09-12 14:30:00', '2025-09-12 14:30:00');
INSERT INTO pages (title, url, content, language, createdAt, updatedAt) VALUES ('Go Concurrency Patterns v2', 'progurl6.dev-v2', 'Goroutines, channels, worker pools, and select usage.', 'en', '2025-09-12 14:30:00', '2025-09-12 14:30:00');

CREATE VIRTUAL TABLE pages_fts USING fts5(
  title,
  content,
  content='pages',          -- Link to real table
  content_rowid='rowid'     -- 'rowid' is implicit primary key in pages
);

INSERT INTO pages_fts(pages_fts) VALUES('rebuild');


CREATE TRIGGER pages_ai AFTER INSERT ON pages BEGIN
    INSERT INTO pages_fts(rowid, title, content)
    VALUES (new.rowid, new.title, new.content);
END;

CREATE TRIGGER pages_ad AFTER DELETE ON pages BEGIN
    INSERT INTO pages_fts(pages_fts, rowid, title, content)
    VALUES ('delete', old.rowid, old.title, old.content);
END;

CREATE TRIGGER pages_au AFTER UPDATE ON pages BEGIN
    INSERT INTO pages_fts(pages_fts, rowid, title, content)
    VALUES ('delete', old.rowid, old.title, old.content);
    INSERT INTO pages_fts(rowid, title, content)
    VALUES (new.rowid, new.title, new.content);
END;

-- ===========================
--  Example FTS query
-- ===========================
-- SELECT title, bm25(pages_fts) AS rank
-- FROM pages
-- JOIN pages_fts ON pages.rowid = pages_fts.rowid
-- WHERE pages_fts MATCH 'promises OR goroutines'
-- ORDER BY rank;
